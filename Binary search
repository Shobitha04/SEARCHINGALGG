/*here, if an element is present, return index of element. If there are many elements of same, return the multiple occurences of the element*/

STEPS:
1. Compute mid = [ (low+high)/2 ]
2. return case 1: (arr[mid]==x)
          case 2: (arr[mid]>x)
          case 3: (arr[mid]<x)

ex:  10 20 30 40 50 60 70
     0   1  2  3  4  5  6
     low                high
         x=60(given)
 mid = (0+6)/ 2 = 3
   arr(3) = 40
Now, 3 cases arise-                             0  1  2  3  4
(we return mid)              case 1: (arr[mid]==x) x=30  10 20 30 40 50 ((0+4)/2) = 2->30
 (repeat: high=mid-1)        case 2: (arr[mid]>x) x=10
 (repeat: low=mid+1)         case 3: (arr[mid]<x) x=50

so x is the target(number we have to search)
We take low and high points for finding the middle element of array. Then we compare the middle of array with the target x.
if they are equal then its found
if the middle array element is greater than x, it means the target is present in right side of the middle element( ex. 10 20 30 40 50 target x= 15 here 30>15, so target element is present on right side of middle ele)
Since ele is present b4 middle element, we take the high as mid-1.
if middle array ele is lesser than x, it means target is present on higher side i.e left side of middle ele. So the low should be mid+1.


l=0; h=n-1; int x=30
while(l<=h)
mid = (l + h)/2
if(arr[mid]==x)
return arr[mid];
else if(arr[mid]>x)
return high = mid - 1
else
 return low = mid + 1












(my wrong code)
void BinarySearchh(int arr[], int n)
{
 int ele;
 for(int i=0;i<=n;i++){
  if(arr[i]==ele)
    return arr[i];
  for(int j=i+1;j<=n;i++)
    if(arr[j]==else)
      return j;
  else
    return -1;
 System.out.println(arr[i],arr[j]);
}
